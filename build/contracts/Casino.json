// Aion
abi: [{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"generateNumberWinner","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberOfBets","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"kill","type":"function"},{"outputs":[{"name":"amountBet","type":"uint128"},{"name":"numberSelected","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"address"}],"name":"playerInfo","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[],"name":"owner","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"numberWinner","type":"uint128"}],"name":"distributePrizes","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"uint128"}],"name":"players","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"minimumBet","type":"function"},{"outputs":[],"constant":false,"payable":true,"inputs":[{"name":"numberSelected","type":"uint128"}],"name":"bet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maxAmountOfBets","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalBet","type":"function"},{"outputs":[],"payable":false,"inputs":[{"name":"_minimumBet","type":"uint128"}],"name":"","type":"constructor"},{"outputs":[],"payable":true,"inputs":[],"name":"","type":"fallback"}]


 casino{"code":"0x605060405260646005600050909055341561001a5760006000fd5b604051601080610872833981016040528080519060100190919050505b336000600050828290918060010183905555505050600081141515610063578060026000508190909055505b5b5061006a565b6107f9806100796000396000f300605060405236156100ac576000356c01000000000000000000000000900463ffffffff1680630a50e361146100b05780632ca8c6d3146100c65780634081d916146100f057806341c0e1b5146101345780634b1146911461014a5780638da5cb5b14610191578063953818c0146101c2578063b3c1c5b0146101e6578063c38a8afd14610225578063d16170dd1461024f578063e08a96cd14610267578063fe5e185314610291576100ac565b5b5b005b34156100bc5760006000fd5b6100c46102bb565b005b34156100d25760006000fd5b6100da6102e2565b6040518082815260100191505060405180910390f35b34156100fc5760006000fd5b61011a600480808060100135903590916020019091929050506102eb565b604051808215151515815260100191505060405180910390f35b34156101405760006000fd5b610148610366565b005b34156101565760006000fd5b61017460048080806010013590359091602001909192905050610390565b604051808381526010018281526010019250505060405180910390f35b341561019d5760006000fd5b6101a56103c4565b604051808383825281601001526020019250505060405180910390f35b34156101ce5760006000fd5b6101e460048080359060100190919050506103d3565b005b34156101f25760006000fd5b610208600480803590601001909190505061059b565b604051808383825281601001526020019250505060405180910390f35b34156102315760006000fd5b6102396105ce565b6040518082815260100191505060405180910390f35b61026560048080359060100190919050506105d7565b005b34156102735760006000fd5b61027b6106f0565b6040518082815260100191505060405180910390f35b341561029d5760006000fd5b6102a56106f9565b6040518082815260100191505060405180910390f35b60006001600a438115156102cb57fe5b060190506102de816103d363ffffffff16565b5b50565b60046000505481565b60006000600090505b60066000508054905081101561035657838360066000508381548110151561031857fe5b9060005260106000209050906002020160005b50806001015490549091149190141615610348576001915061035f565b5b80806001019150506102f4565b6000915061035f565b5092915050565b60006000508060010154905433909114919014161561038d57600060005080600101549054ff5b5b565b6007600050602052818160005260105260306000209050600091509150508060000160005054908060010160005054905082565b60006000508060010154905482565b6103db610702565b60006000600060006000600060009550600094505b6006600050805490508510156104d85760066000508581548110151561041257fe5b9060005260106000209050906002020160005b50806001015490549350935087600760005060008686825281601001526020019081526010016000209050600050600101600050541415610492578383888860648110151561047057fe5b9090602002019190909182828252816010015260200150505085806001019650505b60076000506000858582528160100152602001908152601001600020905060006000820160005060009055600182016000506000905550505b84806001019550506103f0565b60006006600050816104ea9190610732565b50865060646003600050548115156104fe57fe5b049150600090505b858110156105905760006000888360648110151561052057fe5b9090602002018060100151905190911491901416151561058257868160648110151561054857fe5b909060200201806010015190516108fc84908115029060405160006040518083038185898989f194505050505015156105815760006000fd5b5b5b8080600101915050610506565b5b5050505050505050565b6006600050818154811015156105ad57fe5b9060005260106000209050906002020160005b915090508060010154905482565b60026000505481565b6105e6336102eb63ffffffff16565b1515156105f35760006000fd5b600181101580156106055750600a8111155b15156106115760006000fd5b60026000505434101515156106265760006000fd5b34600760005060003382528160100152602001908152601001600020905060005060000160005081909090555080600760005060003382528160100152602001908152601001600020905060005060010160005081909090555060046000818150548092919060010191905090905550600660005080548060010182816106ad9190610766565b91909060005260106000209050906002020160005b3390919290919250919090918060010183905555505034600360008282825054019250508190909055505b50565b60056000505481565b60036000505481565b610c80604051908101604052806064905b6000600082528160100152602001906001900390816107135790505090565b815481835581811511610761576002028160020283600052601060002090509182019101610760919061079a565b5b505050565b815481835581811511610795576002028160020283600052601060002090509182019101610794919061079a565b5b505050565b6107ca91906107a4565b808211156107c6576000818150806000905560010160009055506002016107a4565b5090565b905600a165627a7a72305820c9a86af5337a9176c59fc00145d4f79e8056727b2a81ba283b908fa2016d0bb70029","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"generateNumberWinner","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberOfBets","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"kill","type":"function"},{"outputs":[{"name":"amountBet","type":"uint128"},{"name":"numberSelected","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"address"}],"name":"playerInfo","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[],"name":"owner","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"numberWinner","type":"uint128"}],"name":"distributePrizes","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"uint128"}],"name":"players","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"minimumBet","type":"function"},{"outputs":[],"constant":false,"payable":true,"inputs":[{"name":"numberSelected","type":"uint128"}],"name":"bet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maxAmountOfBets","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalBet","type":"function"},{"outputs":[],"payable":false,"inputs":[{"name":"_minimumBet","type":"uint128"}],"name":"","type":"constructor"},{"outputs":[],"payable":true,"inputs":[],"name":"","type":"fallback"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity 0.4.15;\ncontract Casino {\n   address public owner;\n   uint public minimumBet;\n   uint public totalBet;\n   uint public numberOfBets;\n   uint public maxAmountOfBets = 100;\n   address[] public players;\n   struct Player {\n      uint amountBet;\n      uint numberSelected;\n   }\n   // The address of the player and => the user info\n   mapping(address => Player) public playerInfo;\n   function() public payable {}\n   function Casino(uint _minimumBet) public {\n      owner = msg.sender;\n      if(_minimumBet != 0 ) minimumBet = _minimumBet;\n   }\n   function kill() public {\n      if(msg.sender == owner) selfdestruct(owner);\n   }\n   function checkPlayerExists(address player) public constant returns(bool){\n      for(uint i = 0; i < players.length; i++){\n         if(players[i] == player) return true;\n      }\n      return false;\n   }\n   // To bet for a number between 1 and 10 both inclusive\n   function bet(uint numberSelected) public payable {\n      require(!checkPlayerExists(msg.sender));\n      require(numberSelected >= 1 && numberSelected <= 10);\n      require(msg.value >= minimumBet);\n      playerInfo[msg.sender].amountBet = msg.value;\n      playerInfo[msg.sender].numberSelected = numberSelected;\n      numberOfBets++;\n      players.push(msg.sender);\n      totalBet += msg.value;\n   }\n   // Generates a number between 1 and 10 that will be the winner\n   function generateNumberWinner() public {\n      uint numberGenerated = block.number % 10 + 1; // This isn't secure\n      distributePrizes(numberGenerated);\n   }\n   // Sends the corresponding ether to each winner depending on the total bets\n   function distributePrizes(uint numberWinner) public {\n      address[100] memory winners; // We have to create a temporary in memory array with fixed size\n      uint count = 0; // This is the count for the array of winners\n      for(uint i = 0; i < players.length; i++){\n         address playerAddress = players[i];\n         if(playerInfo[playerAddress].numberSelected == numberWinner){\n            winners[count] = playerAddress;\n            count++;\n         }\n         delete playerInfo[playerAddress]; // Delete all the players\n      }\n      players.length = 0; // Delete all the players array\n      uint winnerEtherAmount = totalBet / winners.length; // How much each winner gets\n      for(uint j = 0; j < count; j++){\n         if(winners[j] != address(0)) // Check that the address in this fixed array is not empty\n         winners[j].transfer(winnerEtherAmount);\n      }\n   }\n}"}}
// Ethereum Casino
{
  "contract_name": "Casino",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "generateNumberWinner",
      "outputs": [],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberOfBets",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "player",
          "type": "address"
        }
      ],
      "name": "checkPlayerExists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "resetData",
      "outputs": [],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "bet",
      "outputs": [],
      "payable": true,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "distributePrizes",
      "outputs": [],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numberWinner",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minimumBet",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxAmountOfBets",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalBet",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_minimumBet",
          "type": "uint256"
        },
        {
          "name": "_maxAmountOfBets",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "constructor"
    },
    {
      "payable": true,
      "type": "fallback"
    }
  ],
  "unlinked_binary": "0x606060405267016345785d8a00006001556064600455341561001d57fe5b6040516040806106738339810160405280516020909101515b60008054600160a060020a03191633600160a060020a0316179055811561005d5760018290555b80156100695760048190555b5b50505b6105f78061007c6000396000f3006060604052361561009e5763ffffffff60e060020a6000350416630a50e36181146100a75780632ca8c6d3146100b95780634081d916146100db57806341c0e1b51461010b578063478c4e0e1461011d5780637365870b1461012f5780637ce52eb61461013c5780639a6a68e91461014e578063c38a8afd14610170578063e08a96cd14610192578063f71d96cb146101b4578063fe5e1853146101e3575b6100a55b5b565b005b34156100af57fe5b6100a5610205565b005b34156100c157fe5b6100c961021b565b60408051918252519081900360200190f35b34156100e357fe5b6100f7600160a060020a0360043516610221565b604080519115158252519081900360200190f35b341561011357fe5b6100a5610294565b005b341561012557fe5b6100a56102bc565b005b6100a56004356102d7565b005b341561014457fe5b6100a5610397565b005b341561015657fe5b6100c96104e2565b60408051918252519081900360200190f35b341561017857fe5b6100c96104e8565b60408051918252519081900360200190f35b341561019a57fe5b6100c96104ee565b60408051918252519081900360200190f35b34156101bc57fe5b6101c76004356104f4565b60408051600160a060020a039092168252519081900360200190f35b34156101eb57fe5b6100c9610526565b60408051918252519081900360200190f35b600a435b066001016005556100a2610397565b5b565b60035481565b6000805b6006548110156102895782600160a060020a031660068281548110151561024857fe5b906000526020600020900160005b9054906101000a9004600160a060020a0316600160a060020a03161415610280576001915061028e565b5b600101610225565b600091505b50919050565b60005433600160a060020a03908116911614156100a257600054600160a060020a0316ff5b5b565b60006102c960068261052c565b50600060028190556003555b565b6102e033610221565b156102e757fe5b600181101580156102f95750600a8111155b151561030157fe5b60015434101561030d57fe5b600160a060020a033316600090815260076020526040902034815560019081018290556003805482019055600680549091810161034a838261052c565b916000526020600020900160005b8154600160a060020a033381166101009390930a928302920219161790555060028054340190556004546003541061039257610392610205565b5b5b50565b61039f610580565b6000808080805b6006548410156104505760068054859081106103be57fe5b906000526020600020900160005b90546005546101009290920a9004600160a060020a03166000818152600760205260409020600101549094501415610425578286866064811061040b57fe5b600160a060020a0390921660209290920201526001909401935b600160a060020a0383166000908152600760205260408120818155600101555b6001909301926103a6565b6002546064905b049150600090505b848110156104d157600086826064811061047557fe5b6020020151600160a060020a0316146104c75785816064811061049457fe5b6020020151604051600160a060020a039091169083156108fc029084906000818181858888f1935050505015156104c757fe5b5b5b60010161045f565b6104d96102bc565b5b505050505050565b60055481565b60015481565b60045481565b600680548290811061050257fe5b906000526020600020900160005b915054906101000a9004600160a060020a031681565b60025481565b815481835581811511610550576000838152602090206105509181019083016105aa565b5b505050565b815481835581811511610550576000838152602090206105509181019083016105aa565b5b505050565b610c80604051908101604052806064905b6000815260001990910190602001816105915790505090565b6105c891905b808211156105c457600081556001016105b0565b5090565b905600a165627a7a72305820c2254a084a6cb7dce8ea02f081e27415e84aec2e6d2636f800916c9947550fe40029",
  "networks": {},
  "schema_version": "0.0.5",
  "updated_at": 1502562165068
}
