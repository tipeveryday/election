{"code":"0x6050604052600160026000509090556064600360005090905560016007600050909055341561002e5760006000fd5b5b3360006000508282909180600101839055555050505b61004a565b610943806100596000396000f300605060405236156100c2576000356c01000000000000000000000000900463ffffffff1680630a50e361146100c6578063227cade5146100dc5780632ca8c6d3146101065780634081d9161461013057806341c0e1b5146101745780634b1146911461018a578063590e1ae3146101d15780637ce52eb6146101e7578063b3c1c5b0146101fd578063c38a8afd1461023c578063d16170dd14610266578063e08a96cd1461027e578063f611e1c9146102a8578063fe5e1853146102d2576100c2565b5b5b005b34156100d25760006000fd5b6100da6102fc565b005b34156100e85760006000fd5b6100f0610344565b6040518082815260100191505060405180910390f35b34156101125760006000fd5b61011a61034d565b6040518082815260100191505060405180910390f35b341561013c5760006000fd5b61015a60048080806010013590359091602001909192905050610356565b604051808215151515815260100191505060405180910390f35b34156101805760006000fd5b6101886103d1565b005b34156101965760006000fd5b6101b4600480808060100135903590916020019091929050506103fb565b604051808381526010018281526010019250505060405180910390f35b34156101dd5760006000fd5b6101e561042f565b005b34156101f35760006000fd5b6101fb610492565b005b34156102095760006000fd5b61021f600480803590601001909190505061069a565b604051808383825281601001526020019250505060405180910390f35b34156102485760006000fd5b6102506106cd565b6040518082815260100191505060405180910390f35b61027c60048080359060100190919050506106d6565b005b341561028a5760006000fd5b610292610831565b6040518082815260100191505060405180910390f35b34156102b45760006000fd5b6102bc61083a565b6040518082815260100191505060405180910390f35b34156102de5760006000fd5b6102e6610843565b6040518082815260100191505060405180910390f35b6000600760005054600560005054101515610340576001600a4381151561031f57fe5b060190506004600660005081909090555061033e61049263ffffffff16565b5b5b5b50565b60036000505481565b60056000505481565b60006000600090505b6008600050805490508110156103c157838360086000508381548110151561038357fe5b9060005260106000209050906002020160005b508060010154905490911491901416156103b357600191506103ca565b5b808060010191505061035f565b600091506103ca565b5092915050565b6000600050806001015490543390911491901416156103f857600060005080600101549054ff5b5b565b6009600050602052818160005260105260306000209050600091509150508060000160005054908060010160005054905082565b6000600060005080600101549054339091149190141615156104515760006000fd5b303190506000600050806001015490546108fc83908115029060405160006040518083038185898989f1945050505050151561048d5760006000fd5b5b5b50565b61049a61084c565b6000600060006000600060006007600050546005600050541015156106905760009550600094505b6008600050805490508510156105af576008600050858154811015156104e457fe5b9060005260106000209050906002020160005b508060010154905493509350600660005054600960005060008686825281601001526020019081526010016000209050600050600101600050541415610569578383888860648110151561054757fe5b9090602002019190909182828252816010015260200150505085806001019650505b60096000506000858582528160100152602001908152601001600020905060006000820160005060009055600182016000506000905550505b84806001019550506104c2565b60006008600050816105c1919061087c565b50600086111561066e57856004600050548115156105db57fe5b049150600090505b8581101561066d576000600088836064811015156105fd57fe5b9090602002018060100151905190911491901416151561065f57868160648110151561062557fe5b909060200201806010015190516108fc84908115029060405160006040518083038185898989f1945050505050151561065e5760006000fd5b5b5b80806001019150506105e3565b5b81600460005054036004600050819090905550600060056000508190909055505b5b5b50505050505050565b6008600050818154811015156106ac57fe5b9060005260106000209050906002020160005b915090508060010154905482565b60026000505481565b600760005054600560005054111515156106f05760006000fd5b600181101580156107025750600a8111155b151561070e5760006000fd5b600015156107213361035663ffffffff16565b15151415156107305760006000fd5b60026000505434101515156107455760006000fd5b34600960005060003382528160100152602001908152601001600020905060005060000160005081909090555080600960005060003382528160100152602001908152601001600020905060005060010160005081909090555060056000818150548092919060010191905090905550600860005080548060010182816107cc91906108b0565b91909060005260106000209050906002020160005b33909192909192509190909180600101839055555050346004600082828250540192505081909090555060076000505460056000505410151561082d5761082c6102fc63ffffffff16565b5b5b50565b60076000505481565b60066000505481565b60046000505481565b610c80604051908101604052806064905b60006000825281601001526020019060019003908161085d5790505090565b8154818355818115116108ab5760020281600202836000526010600020905091820191016108aa91906108e4565b5b505050565b8154818355818115116108df5760020281600202836000526010600020905091820191016108de91906108e4565b5b505050565b61091491906108ee565b80821115610910576000818150806000905560010160009055506002016108ee565b5090565b905600a165627a7a723058204f096cc549546c6be5e1101d53512a8b7007b6b2593e72953e258ba2d8ce60650029","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"generateNumberWinner","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maximumBet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberOfBets","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"kill","type":"function"},{"outputs":[{"name":"amountBet","type":"uint128"},{"name":"numberSelected","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"address"}],"name":"playerInfo","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"refund","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"distributePrizes","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"uint128"}],"name":"players","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"minimumBet","type":"function"},{"outputs":[],"constant":false,"payable":true,"inputs":[{"name":"numberSelected","type":"uint128"}],"name":"bet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maxAmountOfBets","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"lastLuckyAnimal","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalBet","type":"function"},{"outputs":[],"payable":false,"inputs":[],"name":"","type":"constructor"},{"outputs":[],"payable":true,"inputs":[],"name":"","type":"fallback"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.11;\n\n/// @title Contract to bet AION for a number and win randomly when the number of bets is met.\n/// @author Merunas Grincalaitis\n/// edited by Kim Codeashian\ncontract Casino {\n  address owner;\n\n  // The minimum bet a user has to make to participate in the game\n  uint public minimumBet = 1; // Equal to 1.00 AION\n  // The maximum bet a user has to make to participate in the game\n  uint public maximumBet = 100; // Equal to 100 AION\n  // The total amount of AION bet for this current game\n  uint public totalBet;\n\n  // The total number of bets the users have made\n  uint public numberOfBets;\n\n  // The number / animal that won the last game\n  uint public lastLuckyAnimal;\n\n  // The maximum amount of bets can be made for each game\n  uint public maxAmountOfBets = 1;\n\n  address[] public players;\n  struct Player {\n    uint amountBet;\n    uint numberSelected;\n  }\n  // The address of the player and => the user info\n  mapping(address => Player) public playerInfo;\n\n\n  // Modifier to only allow the execution of functions when the bets are completed\n  modifier onEndGame(){\n    if(numberOfBets >= maxAmountOfBets) _;\n  }\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  function Casino(){\n    owner = msg.sender;\n  }\n\n  // Make sure contract has balance > maximumBet so\n  // distributePrizes will be able to execute without failure\n  function() public payable {}\n\n  // refund all tokens back to owner\n  function refund() public onlyOwner {\n    uint totalBalance = this.balance;\n    owner.transfer(totalBalance);\n  }\n\n  function kill() public {\n    if(msg.sender == owner) selfdestruct(owner);\n   }\n  /// @notice Check if a player exists in the current game\n  /// @param player The address of the player to check\n  /// @return bool Returns true is it exists or false if it doesn't\n  function checkPlayerExists(address player) public constant returns(bool){\n    for(uint i = 0; i < players.length; i++){\n       if(players[i] == player) return true;\n    }\n    return false;\n }\n\n  /// @notice To bet for a number by sending AION\n  /// @param numberSelected The number that the player wants to bet for. Must be between 1 and 10 both inclusive\n  function bet(uint numberSelected) payable {\n    // Check that the max amount of bets hasn't been met yet\n    require(numberOfBets <= maxAmountOfBets);\n\n    // Check that the number to bet is within the range\n    require(numberSelected >= 1 && numberSelected <= 10);\n\n    // Check that the player doesn't exists\n    require(checkPlayerExists(msg.sender) == false);\n\n    // Check that the amount paid is bigger or equal the minimum bet\n    require(msg.value >= minimumBet);\n    playerInfo[msg.sender].amountBet = msg.value;\n    playerInfo[msg.sender].numberSelected = numberSelected;\n    numberOfBets++;\n    players.push(msg.sender);\n    totalBet += msg.value;\n\n    if(numberOfBets >= maxAmountOfBets) generateNumberWinner();\n  }\n\n  /// @notice Generates a random number between 1 and 10 both inclusive.\n  /// Can only be executed when the game ends.\n  function generateNumberWinner() onEndGame {\n    uint numberGenerated = block.number % 10 + 1; // This isn't secure\n    /* lastLuckyAnimal = numberGenerated; */\n    // REMOVE HARDCODE BELOW\n    lastLuckyAnimal = 4;\n    distributePrizes();\n  }\n\n  /// @notice Sends the corresponding AION to each winner then deletes all the\n  /// players for the next game and resets the `totalBet` and `numberOfBets`\n  function distributePrizes() onEndGame {\n    address[100] memory winners; // We have to create a temporary in memory array with fixed size\n    uint count = 0; // This is the count for the array of winners\n    for(uint i = 0; i < players.length; i++){\n       address playerAddress = players[i];\n       if(playerInfo[playerAddress].numberSelected == lastLuckyAnimal){\n          winners[count] = playerAddress;\n          count++;\n       }\n       delete playerInfo[playerAddress]; // Delete all the players\n    }\n    players.length = 0; // Delete all the players array\n    if (count > 0){\n      uint winnerAIONAmount = totalBet / count; // How much each winner gets\n      for(uint j = 0; j < count; j++){\n        if(winners[j] != address(0)) // Check that the address in this fixed array is not empty\n        winners[j].transfer(winnerAIONAmount);\n      }\n    }\n    /* Rollover amount if no winners */\n    totalBet = totalBet - winnerAIONAmount;\n    numberOfBets = 0;\n  }\n}\n"}}
