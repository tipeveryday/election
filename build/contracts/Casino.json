{"code":"0x60506040526103b060036000509090556004600460005090905560086005600050909055600a600660005090905534156100395760006000fd5b6040516010806108db833981016040528080519060100190919050505b336000600050828290918060010183905555505050600081141515610082578060026000508190909055505b5b50610089565b610843806100986000396000f300605060405236156100b7576000356c01000000000000000000000000900463ffffffff1680630a50e361146100bb5780631791cfb3146100d15780632ca8c6d3146100fb5780634081d9161461012557806341c0e1b5146101695780634b1146911461017f5780638da5cb5b146101c6578063953818c0146101f7578063b3c1c5b01461021b578063c38a8afd1461025a578063d16170dd14610284578063e08a96cd1461029c578063fe5e1853146102c6576100b7565b5b5b005b34156100c75760006000fd5b6100cf6102f0565b005b34156100dd5760006000fd5b6100e5610323565b6040518082815260100191505060405180910390f35b34156101075760006000fd5b61010f61032c565b6040518082815260100191505060405180910390f35b34156101315760006000fd5b61014f60048080806010013590359091602001909192905050610335565b604051808215151515815260100191505060405180910390f35b34156101755760006000fd5b61017d6103b0565b005b341561018b5760006000fd5b6101a9600480808060100135903590916020019091929050506103da565b604051808381526010018281526010019250505060405180910390f35b34156101d25760006000fd5b6101da61040e565b604051808383825281601001526020019250505060405180910390f35b34156102035760006000fd5b610219600480803590601001909190505061041d565b005b34156102275760006000fd5b61023d60048080359060100190919050506105e5565b604051808383825281601001526020019250505060405180910390f35b34156102665760006000fd5b61026e610618565b6040518082815260100191505060405180910390f35b61029a6004808035906010019091905050610621565b005b34156102a85760006000fd5b6102b061073a565b6040518082815260100191505060405180910390f35b34156102d25760006000fd5b6102da610743565b6040518082815260100191505060405180910390f35b60006001600a4381151561030057fe5b060190506103138161041d63ffffffff16565b8060056000508190909055505b50565b60056000505481565b60046000505481565b60006000600090505b6007600050805490508110156103a057838360076000508381548110151561036257fe5b9060005260106000209050906002020160005b5080600101549054909114919014161561039257600191506103a9565b5b808060010191505061033e565b600091506103a9565b5092915050565b6000600050806001015490543390911491901416156103d757600060005080600101549054ff5b5b565b6008600050602052818160005260105260306000209050600091509150508060000160005054908060010160005054905082565b60006000508060010154905482565b61042561074c565b60006000600060006000600060009550600094505b6007600050805490508510156105225760076000508581548110151561045c57fe5b9060005260106000209050906002020160005b508060010154905493509350876008600050600086868252816010015260200190815260100160002090506000506001016000505414156104dc57838388886064811015156104ba57fe5b9090602002019190909182828252816010015260200150505085806001019650505b60086000506000858582528160100152602001908152601001600020905060006000820160005060009055600182016000506000905550505b848060010195505061043a565b6000600760005081610534919061077c565b508650606460036000505481151561054857fe5b049150600090505b858110156105da5760006000888360648110151561056a57fe5b909060200201806010015190519091149190141615156105cc57868160648110151561059257fe5b909060200201806010015190516108fc84908115029060405160006040518083038185898989f194505050505015156105cb5760006000fd5b5b5b8080600101915050610550565b5b5050505050505050565b6007600050818154811015156105f757fe5b9060005260106000209050906002020160005b915090508060010154905482565b60026000505481565b6106303361033563ffffffff16565b15151561063d5760006000fd5b6001811015801561064f5750600a8111155b151561065b5760006000fd5b60026000505434101515156106705760006000fd5b34600860005060003382528160100152602001908152601001600020905060005060000160005081909090555080600860005060003382528160100152602001908152601001600020905060005060010160005081909090555060046000818150548092919060010191905090905550600760005080548060010182816106f791906107b0565b91909060005260106000209050906002020160005b3390919290919250919090918060010183905555505034600360008282825054019250508190909055505b50565b60066000505481565b60036000505481565b610c80604051908101604052806064905b60006000825281601001526020019060019003908161075d5790505090565b8154818355818115116107ab5760020281600202836000526010600020905091820191016107aa91906107e4565b5b505050565b8154818355818115116107df5760020281600202836000526010600020905091820191016107de91906107e4565b5b505050565b61081491906107ee565b80821115610810576000818150806000905560010160009055506002016107ee565b5090565b905600a165627a7a72305820da85d4ab0faf29a475e55dea2397fd8eed072ff4b0a11e3d5894e31eca2088f40029","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"generateNumberWinner","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"lastLuckyFace","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberOfBets","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"kill","type":"function"},{"outputs":[{"name":"amountBet","type":"uint128"},{"name":"numberSelected","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"address"}],"name":"playerInfo","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[],"name":"owner","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[{"name":"numberWinner","type":"uint128"}],"name":"distributePrizes","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"uint128"}],"name":"players","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"minimumBet","type":"function"},{"outputs":[],"constant":false,"payable":true,"inputs":[{"name":"numberSelected","type":"uint128"}],"name":"bet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maxAmountOfBets","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalBet","type":"function"},{"outputs":[],"payable":false,"inputs":[{"name":"_minimumBet","type":"uint128"}],"name":"","type":"constructor"},{"outputs":[],"payable":true,"inputs":[],"name":"","type":"fallback"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity 0.4.15;\ncontract Casino {\n   address public owner;\n   uint public minimumBet;\n   uint public totalBet = 944;\n   uint public numberOfBets = 4;\n   uint public lastLuckyFace = 8;\n   uint public maxAmountOfBets = 10;\n   address[] public players;\n   struct Player {\n      uint amountBet;\n      uint numberSelected;\n   }\n   // The address of the player and => the user info\n   mapping(address => Player) public playerInfo;\n   function() public payable {}\n   function Casino(uint _minimumBet) public {\n      owner = msg.sender;\n      if(_minimumBet != 0 ) minimumBet = _minimumBet;\n   }\n   function kill() public {\n      if(msg.sender == owner) selfdestruct(owner);\n   }\n   function checkPlayerExists(address player) public constant returns(bool){\n      for(uint i = 0; i < players.length; i++){\n         if(players[i] == player) return true;\n      }\n      return false;\n   }\n   // To bet for a number between 1 and 10 both inclusive\n   function bet(uint numberSelected) public payable {\n      require(!checkPlayerExists(msg.sender));\n      require(numberSelected >= 1 && numberSelected <= 10);\n      require(msg.value >= minimumBet);\n      playerInfo[msg.sender].amountBet = msg.value;\n      playerInfo[msg.sender].numberSelected = numberSelected;\n      numberOfBets++;\n      players.push(msg.sender);\n      totalBet += msg.value;\n   }\n   // Generates a number between 1 and 10 that will be the winner\n   function generateNumberWinner() public {\n      uint numberGenerated = block.number % 10 + 1; // This isn't secure\n      distributePrizes(numberGenerated);\n      lastLuckyFace = numberGenerated;\n   }\n   // Sends the corresponding ether to each winner depending on the total bets\n   function distributePrizes(uint numberWinner) public {\n      address[100] memory winners; // We have to create a temporary in memory array with fixed size\n      uint count = 0; // This is the count for the array of winners\n      for(uint i = 0; i < players.length; i++){\n         address playerAddress = players[i];\n         if(playerInfo[playerAddress].numberSelected == numberWinner){\n            winners[count] = playerAddress;\n            count++;\n         }\n         delete playerInfo[playerAddress]; // Delete all the players\n      }\n      players.length = 0; // Delete all the players array\n      uint winnerEtherAmount = totalBet / winners.length; // How much each winner gets\n      for(uint j = 0; j < count; j++){\n         if(winners[j] != address(0)) // Check that the address in this fixed array is not empty\n         winners[j].transfer(winnerEtherAmount);\n      }\n   }\n}"}}
