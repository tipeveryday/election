{"code":"0x60506040526001600260005090905560646003600050909055600a6005600050909055341561002e5760006000fd5b5b3360006000508282909180600101839055555050505b61004a565b610942806100596000396000f300605060405236156100c2576000356c01000000000000000000000000900463ffffffff1680630a50e361146100c6578063227cade5146100dc5780632ca8c6d3146101065780634081d9161461013057806341c0e1b5146101745780634b1146911461018a578063590e1ae3146101d15780637ce52eb6146101e7578063b3c1c5b0146101fd578063c38a8afd1461023c578063d16170dd14610266578063e08a96cd1461027e578063f611e1c9146102a8578063fe5e1853146102d2576100c2565b5b5b005b34156100d25760006000fd5b6100da6102fc565b005b34156100e85760006000fd5b6100f0610343565b6040518082815260100191505060405180910390f35b34156101125760006000fd5b61011a61034c565b6040518082815260100191505060405180910390f35b341561013c5760006000fd5b61015a60048080806010013590359091602001909192905050610355565b604051808215151515815260100191505060405180910390f35b34156101805760006000fd5b6101886103d0565b005b34156101965760006000fd5b6101b4600480808060100135903590916020019091929050506103fa565b604051808381526010018281526010019250505060405180910390f35b34156101dd5760006000fd5b6101e561042e565b005b34156101f35760006000fd5b6101fb610491565b005b34156102095760006000fd5b61021f6004808035906010019091905050610699565b604051808383825281601001526020019250505060405180910390f35b34156102485760006000fd5b6102506106cc565b6040518082815260100191505060405180910390f35b61027c60048080359060100190919050506106d5565b005b341561028a5760006000fd5b610292610830565b6040518082815260100191505060405180910390f35b34156102b45760006000fd5b6102bc610839565b6040518082815260100191505060405180910390f35b34156102de5760006000fd5b6102e6610842565b6040518082815260100191505060405180910390f35b600060056000505460046000505410151561033f576001600a4381151561031f57fe5b0601905080600760005081909090555061033d61049163ffffffff16565b5b5b5b50565b60036000505481565b60046000505481565b60006000600090505b6008600050805490508110156103c057838360086000508381548110151561038257fe5b9060005260106000209050906002020160005b508060010154905490911491901416156103b257600191506103c9565b5b808060010191505061035e565b600091506103c9565b5092915050565b6000600050806001015490543390911491901416156103f757600060005080600101549054ff5b5b565b6009600050602052818160005260105260306000209050600091509150508060000160005054908060010160005054905082565b6000600060005080600101549054339091149190141615156104505760006000fd5b303190506000600050806001015490546108fc83908115029060405160006040518083038185898989f1945050505050151561048c5760006000fd5b5b5b50565b61049961084b565b60006000600060006000600060056000505460046000505410151561068f5760009550600094505b6008600050805490508510156105ae576008600050858154811015156104e357fe5b9060005260106000209050906002020160005b508060010154905493509350600760005054600960005060008686825281601001526020019081526010016000209050600050600101600050541415610568578383888860648110151561054657fe5b9090602002019190909182828252816010015260200150505085806001019650505b60096000506000858582528160100152602001908152601001600020905060006000820160005060009055600182016000506000905550505b84806001019550506104c1565b60006008600050816105c0919061087b565b50600086111561066d57856006600050548115156105da57fe5b049150600090505b8581101561066c576000600088836064811015156105fc57fe5b9090602002018060100151905190911491901416151561065e57868160648110151561062457fe5b909060200201806010015190516108fc84908115029060405160006040518083038185898989f1945050505050151561065d5760006000fd5b5b5b80806001019150506105e2565b5b81600660005054036006600050819090905550600060046000508190909055505b5b5b50505050505050565b6008600050818154811015156106ab57fe5b9060005260106000209050906002020160005b915090508060010154905482565b60026000505481565b600560005054600460005054111515156106ef5760006000fd5b600181101580156107015750600a8111155b151561070d5760006000fd5b600015156107203361035563ffffffff16565b151514151561072f5760006000fd5b60026000505434101515156107445760006000fd5b34600960005060003382528160100152602001908152601001600020905060005060000160005081909090555080600960005060003382528160100152602001908152601001600020905060005060010160005081909090555060046000818150548092919060010191905090905550600860005080548060010182816107cb91906108af565b91909060005260106000209050906002020160005b33909192909192509190909180600101839055555050346006600082828250540192505081909090555060056000505460046000505410151561082c5761082b6102fc63ffffffff16565b5b5b50565b60056000505481565b60076000505481565b60066000505481565b610c80604051908101604052806064905b60006000825281601001526020019060019003908161085c5790505090565b8154818355818115116108aa5760020281600202836000526010600020905091820191016108a991906108e3565b5b505050565b8154818355818115116108de5760020281600202836000526010600020905091820191016108dd91906108e3565b5b505050565b61091391906108ed565b8082111561090f576000818150806000905560010160009055506002016108ed565b5090565b905600a165627a7a723058207c3c42e133dac604932a4e9dc07bb7152dc365647b59b94e1103882a26119bfc0029","info":{"abiDefinition":[{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"generateNumberWinner","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maximumBet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberOfBets","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"kill","type":"function"},{"outputs":[{"name":"amountBet","type":"uint128"},{"name":"numberSelected","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"address"}],"name":"playerInfo","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"refund","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"distributePrizes","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"uint128"}],"name":"players","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"minimumBet","type":"function"},{"outputs":[],"constant":false,"payable":true,"inputs":[{"name":"numberSelected","type":"uint128"}],"name":"bet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maxAmountOfBets","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"lastLuckyAnimal","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalBet","type":"function"},{"outputs":[],"payable":false,"inputs":[],"name":"","type":"constructor"},{"outputs":[],"payable":true,"inputs":[],"name":"","type":"fallback"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.11;\n\ncontract Casino {\n  address owner;\n  uint public minimumBet = 1;\n  uint public maximumBet = 100;\n  uint public numberOfBets;\n  uint public maxAmountOfBets = 10;\n  uint public totalBet;\n  uint public lastLuckyAnimal;\n\n  address[] public players;\n  struct Player {\n    uint amountBet;\n    uint numberSelected;\n  }\n  mapping(address => Player) public playerInfo;\n\n\n  modifier onEndGame(){\n    if(numberOfBets >= maxAmountOfBets) _;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function Casino(){\n    owner = msg.sender;\n  }\n  function() public payable {}\n\n  function refund() public onlyOwner {\n    uint totalBalance = this.balance;\n    owner.transfer(totalBalance);\n  }\n\n  function kill() public {\n    if(msg.sender == owner) selfdestruct(owner);\n   }\n\n  function checkPlayerExists(address player) public constant returns(bool){\n    for(uint i = 0; i < players.length; i++){\n       if(players[i] == player) return true;\n    }\n    return false;\n  }\n\n  function bet(uint numberSelected) payable {\n    require(numberOfBets <= maxAmountOfBets);\n    require(numberSelected >= 1 && numberSelected <= 10);\n    require(checkPlayerExists(msg.sender) == false);\n    require(msg.value >= minimumBet);\n\n    playerInfo[msg.sender].amountBet = msg.value;\n    playerInfo[msg.sender].numberSelected = numberSelected;\n    numberOfBets++;\n\n    players.push(msg.sender);\n    totalBet += msg.value;\n\n    if(numberOfBets >= maxAmountOfBets) generateNumberWinner();\n  }\n\n  function generateNumberWinner() onEndGame {\n    uint numberGenerated = block.number % 10 + 1;\n    lastLuckyAnimal = numberGenerated;\n    distributePrizes();\n  }\n\n  function distributePrizes() onEndGame {\n    address[100] memory winners;\n    uint count = 0;\n\n    for(uint i = 0; i < players.length; i++){\n       address playerAddress = players[i];\n       if(playerInfo[playerAddress].numberSelected == lastLuckyAnimal){\n          winners[count] = playerAddress;\n          count++;\n       }\n       delete playerInfo[playerAddress];\n    }\n    players.length = 0;\n    if (count > 0){\n      uint winnerAIONAmount = totalBet / count;\n      for(uint j = 0; j < count; j++){\n        if(winners[j] != address(0))\n        winners[j].transfer(winnerAIONAmount);\n      }\n    }\n\n    totalBet = totalBet - winnerAIONAmount;\n    numberOfBets = 0;\n  }\n}\n"}}
