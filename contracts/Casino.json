{"code":"0x6050604052600160026000509090556032600360005090905560076005600050909055341561002e5760006000fd5b5b3360006000508282909180600101839055555050505b61004a565b61099c806100596000396000f300605060405236156100ac576000356c01000000000000000000000000900463ffffffff168063227cade5146100b05780632ca8c6d3146100da5780634081d9161461010457806341c0e1b5146101485780634b1146911461015e578063590e1ae3146101a5578063b3c1c5b0146101bb578063c38a8afd146101fa578063d16170dd14610224578063e08a96cd1461023c578063f611e1c914610266578063fe5e185314610290576100ac565b5b5b005b34156100bc5760006000fd5b6100c46102ba565b6040518082815260100191505060405180910390f35b34156100e65760006000fd5b6100ee6102c3565b6040518082815260100191505060405180910390f35b34156101105760006000fd5b61012e600480808060100135903590916020019091929050506102cc565b604051808215151515815260100191505060405180910390f35b34156101545760006000fd5b61015c610347565b005b341561016a5760006000fd5b61018860048080806010013590359091602001909192905050610371565b604051808381526010018281526010019250505060405180910390f35b34156101b15760006000fd5b6101b96103a5565b005b34156101c75760006000fd5b6101dd6004808035906010019091905050610408565b604051808383825281601001526020019250505060405180910390f35b34156102065760006000fd5b61020e61043b565b6040518082815260100191505060405180910390f35b61023a6004808035906010019091905050610444565b005b34156102485760006000fd5b61025061059f565b6040518082815260100191505060405180910390f35b34156102725760006000fd5b61027a6105a8565b6040518082815260100191505060405180910390f35b341561029c5760006000fd5b6102a46105b1565b6040518082815260100191505060405180910390f35b60036000505481565b60046000505481565b60006000600090505b6008600050805490508110156103375783836008600050838154811015156102f957fe5b9060005260106000209050906002020160005b508060010154905490911491901416156103295760019150610340565b5b80806001019150506102d5565b60009150610340565b5092915050565b60006000508060010154905433909114919014161561036e57600060005080600101549054ff5b5b565b6009600050602052818160005260105260306000209050600091509150508060000160005054908060010160005054905082565b6000600060005080600101549054339091149190141615156103c75760006000fd5b303190506000600050806001015490546108fc83908115029060405160006040518083038185898989f194505050505015156104035760006000fd5b5b5b50565b60086000508181548110151561041a57fe5b9060005260106000209050906002020160005b915090508060010154905482565b60026000505481565b6005600050546004600050541115151561045e5760006000fd5b600181101580156104705750600a8111155b151561047c5760006000fd5b6000151561048f336102cc63ffffffff16565b151514151561049e5760006000fd5b60026000505434101515156104b35760006000fd5b346009600050600033825281601001526020019081526010016000209050600050600001600050819090905550806009600050600033825281601001526020019081526010016000209050600050600101600050819090905550600460008181505480929190600101919050909055506008600050805480600101828161053a91906108a5565b91909060005260106000209050906002020160005b33909192909192509190909180600101839055555050346006600082828250540192505081909090555060056000505460046000505410151561059b5761059a6105ba63ffffffff16565b5b5b50565b60056000505481565b60076000505481565b60066000505481565b6000600560005054600460005054101515610639576001600a438115156105dd57fe5b060190508060076000508190909055506105fb61063d63ffffffff16565b7f085498bc48ecf0627eddf2a22aae51b0d327d2d389c8b95043331974a01abecc6007600050546040518082815260100191505060405180910390a15b5b5b50565b6106456108d9565b60006000600060006000600060056000505460046000505410151561089b5760009550600094505b60086000508054905085101561075a5760086000508581548110151561068f57fe5b9060005260106000209050906002020160005b50806001015490549350935060076000505460096000506000868682528160100152602001908152601001600020905060005060010160005054141561071457838388886064811015156106f257fe5b9090602002019190909182828252816010015260200150505085806001019650505b60096000506000858582528160100152602001908152601001600020905060006000820160005060009055600182016000506000905550505b848060010195505061066d565b600060086000508161076c9190610909565b50600086111561088c578560066000505481151561078657fe5b049150600090505b8581101561088b576000600088836064811015156107a857fe5b90906020020180601001519051909114919014161515610823577f0e73d440f472f97d0bc6b4eaf9caddef7f14e33205f2fcfdaaf8739f9cf864ac88836064811015156107f157fe5b909060200201806010015190518560405180848482528160100152602001828152601001935050505060405180910390a15b868160648110151561083157fe5b909060200201806010015190516108fc84908115029060405160006040518083038185898989f1945050505050151561086a5760006000fd5b816006600050540360066000508190909055505b808060010191505061078e565b5b600060046000508190909055505b5b5b50505050505050565b8154818355818115116108d45760020281600202836000526010600020905091820191016108d3919061093d565b5b505050565b610c80604051908101604052806064905b6000600082528160100152602001906001900390816108ea5790505090565b815481835581811511610938576002028160020283600052601060002090509182019101610937919061093d565b5b505050565b61096d9190610947565b8082111561096957600081815080600090556001016000905550600201610947565b5090565b905600a165627a7a72305820c00a790b8b347263d80b714257b22e2774269e5bf80a658b6fe2b8d1f48df0280029","info":{"abiDefinition":[{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maximumBet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"numberOfBets","type":"function"},{"outputs":[{"name":"","type":"bool"}],"constant":true,"payable":false,"inputs":[{"name":"player","type":"address"}],"name":"checkPlayerExists","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"kill","type":"function"},{"outputs":[{"name":"amountBet","type":"uint128"},{"name":"numberSelected","type":"uint128"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"address"}],"name":"playerInfo","type":"function"},{"outputs":[],"constant":false,"payable":false,"inputs":[],"name":"refund","type":"function"},{"outputs":[{"name":"","type":"address"}],"constant":true,"payable":false,"inputs":[{"name":"","type":"uint128"}],"name":"players","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"minimumBet","type":"function"},{"outputs":[],"constant":false,"payable":true,"inputs":[{"name":"numberSelected","type":"uint128"}],"name":"bet","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"maxAmountOfBets","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"lastLuckyAnimal","type":"function"},{"outputs":[{"name":"","type":"uint128"}],"constant":true,"payable":false,"inputs":[],"name":"totalBet","type":"function"},{"outputs":[],"payable":false,"inputs":[],"name":"","type":"constructor"},{"outputs":[],"payable":true,"inputs":[],"name":"","type":"fallback"},{"outputs":[],"inputs":[{"indexed":false,"name":"value","type":"uint128"}],"name":"AnimalChosen","anonymous":false,"type":"event"},{"outputs":[],"inputs":[{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint128"}],"name":"WinnerTransfer","anonymous":false,"type":"event"}],"languageVersion":"0","language":"Solidity","compilerVersion":"0.4.15+commit.ecf81ee5.Linux.g++","source":"pragma solidity ^0.4.15;\n\ncontract Casino {\n  address owner;\n  uint public minimumBet = 1;\n  uint public maximumBet = 50;\n  uint public numberOfBets;\n  uint public maxAmountOfBets = 7;\n  uint public totalBet;\n  uint public lastLuckyAnimal;\n  address[] public players;\n\n  struct Player {\n    uint amountBet;\n    uint numberSelected;\n  }\n  mapping(address => Player) public playerInfo;\n\n  event AnimalChosen(uint value);\n  event WinnerTransfer(address to, uint value);\n\n  modifier onEndGame(){\n    if(numberOfBets >= maxAmountOfBets) _;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function Casino(){\n    owner = msg.sender;\n  }\n\n  function() public payable {}\n\n  function refund() public onlyOwner {\n    uint totalBalance = this.balance;\n    owner.transfer(totalBalance);\n  }\n\n  function kill() public {\n    if(msg.sender == owner) selfdestruct(owner);\n   }\n\n  function checkPlayerExists(address player) public constant returns(bool){\n    for(uint i = 0; i < players.length; i++){\n       if(players[i] == player) return true;\n    }\n    return false;\n  }\n\n  function bet(uint numberSelected) payable {\n    require(numberOfBets <= maxAmountOfBets);\n    require(numberSelected >= 1 && numberSelected <= 10);\n    require(checkPlayerExists(msg.sender) == false);\n    require(msg.value >= minimumBet);\n\n    playerInfo[msg.sender].amountBet = msg.value;\n    playerInfo[msg.sender].numberSelected = numberSelected;\n    numberOfBets++;\n\n    players.push(msg.sender);\n    totalBet += msg.value;\n\n    if(numberOfBets >= maxAmountOfBets) generateNumberWinner();\n  }\n\n  function generateNumberWinner() private onEndGame {\n    uint numberGenerated = block.number % 10 + 1;\n    lastLuckyAnimal = numberGenerated;\n    distributePrizes();\n\n    AnimalChosen(lastLuckyAnimal);\n  }\n\n  function distributePrizes() private onEndGame {\n    address[100] memory winners;\n    uint count = 0;\n\n    for(uint i = 0; i < players.length; i++){\n       address playerAddress = players[i];\n       if(playerInfo[playerAddress].numberSelected == lastLuckyAnimal){\n          winners[count] = playerAddress;\n          count++;\n       }\n       delete playerInfo[playerAddress];\n    }\n    players.length = 0;\n\n    if (count > 0){\n      uint winnerAIONAmount = totalBet / count;\n      for(uint j = 0; j < count; j++){\n        if(winners[j] != address(0))\n        WinnerTransfer(winners[j], winnerAIONAmount);\n        winners[j].transfer(winnerAIONAmount);\n        totalBet = totalBet - winnerAIONAmount;\n      }\n    }\n\n    numberOfBets = 0;\n  }\n}\n"}}
